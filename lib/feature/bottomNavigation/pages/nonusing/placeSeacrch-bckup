
// import 'dart:async';

// import 'package:drivex/main.dart';
// import 'package:flutter/cupertino.dart';
// import 'package:flutter/material.dart';
// import 'package:google_maps_flutter/google_maps_flutter.dart';

// // Google Places (legacy SDK youâ€™re using)
// import 'package:flutter_google_places_hoc081098/google_maps_webservice_places.dart'
//     as gmws;
// import 'package:google_api_headers/google_api_headers.dart';

// // Current location + reverse geocoding
// import 'package:geolocator/geolocator.dart';
// import 'package:geocoding/geocoding.dart';

// // ðŸ”¥ Firestore
// import 'package:cloud_firestore/cloud_firestore.dart';

// import 'package:uuid/uuid.dart';

// class D2dPlaceSearchPage extends StatefulWidget {
//   const D2dPlaceSearchPage({
//     super.key,
//     required this.controller, // FROM/TO controller (parent)
//     required this.accentColor, // green/red
//     required this.label, // "Pickup" or "Destination"
//     // required this.mainDb, // PRIMARY Firestore (drivex)
//     // required this.gServiceDb, // SECONDARY Firestore (g-service)
//     this.defaultSenderName,
//     this.defaultSenderMobile,
//   });

//   final TextEditingController controller;
//   final Color accentColor;
//   final String label;

//   /// PRIMARY Firestore (drivex) â€” use for "everything else"
//   // final FirebaseFirestore mainDb;

//   // /// SECONDARY Firestore (g-service) â€” use ONLY for `places_cache`
//   // final FirebaseFirestore gServiceDb;

//   /// Optional defaults for the confirm sheet
//   final String? defaultSenderName;
//   final String? defaultSenderMobile;

//   @override
//   State<D2dPlaceSearchPage> createState() => _D2dPlaceSearchPageState();
// }

// /// Row used when showing Firebase cache results
// class _LocalPlace {
//   final String id;
//   final String title;
//   final String subtitle;
//   final LatLng? latLng;
//   final DocumentReference<Map<String, dynamic>> docRef;

//   _LocalPlace({
//     required this.id,
//     required this.title,
//     required this.subtitle,
//     required this.latLng,
//     required this.docRef,
//   });
// }

// class _D2dPlaceSearchPageState extends State<D2dPlaceSearchPage> {
//   // NOTE: keep using your existing key here (legacy SDK). Make sure Places/Maps are enabled.
//   final String googleApiKey = "AIzaSyDwD1BJXVxky_Cy6xzyQh_5A2PW9cTOO0I";

//   GoogleMapController? mapController;

//   // ðŸ‘‰ Convenience getters so we never mix DBs up
//   FirebaseFirestore get _main => AppFire.mainDb; // drivex
//   FirebaseFirestore get _gsvc => AppFire.gServiceDb; // g-service

//   // Search state
//   late TextEditingController _searchCtrl; // bound to parent
//   final FocusNode _searchFocus = FocusNode();
//   Timer? _debounce;
//   String _sessionToken = const Uuid().v4();

//   // Google results
//   List<gmws.Prediction> _results = [];

//   // Local (Firestore) results
//   List<_LocalPlace> _localResults = [];

//   // Which list is currently displayed in the panel
//   bool _showingLocal = false;

//   bool _loading = false;
//   String? _error;

//   // Location/state
//   LatLng _biasCenter = const LatLng(10.8505, 76.2711); // fallback: Kerala
//   String? _currentStateName;
//   LatLng? _pendingCameraTarget;

//   // Map/markers
//   final Set<Marker> _markers = {};
//   final CameraPosition _initialPosition = const CameraPosition(
//     target: LatLng(10.8505, 76.2711),
//     zoom: 14.0,
//   );

//   // --- Confirm sheet temp values (set on selection) ---
//   String? _pendingAddressTitle;
//   String? _pendingFullAddress;
//   LatLng? _pendingLatLng;

//   // Confirm sheet controllers
//   final TextEditingController _houseCtrl = TextEditingController();
//   final TextEditingController _nameCtrl = TextEditingController();
//   final TextEditingController _phoneCtrl = TextEditingController();
//   final TextEditingController _instructionCtrl = TextEditingController();
//   final TextEditingController _pkgOtherCtrl = TextEditingController();

//   bool _useMyMobile = false;

//   // Package type selection (confirm sheet)
//   String? _pkgSelectedKey; // e.g., 'document', 'other'
//   bool get _showPkgOtherField => _pkgSelectedKey == 'other';

//   // Track whether user confirmed (so we know whether to keep/clear text on pop)
//   bool _confirmed = false;

//   // Package type map
//   final Map<String, Map<String, dynamic>> _packageTypeMap = const {
//     'document': {'label': 'Document', 'icon': Icons.description},
//     'box': {'label': 'Box', 'icon': Icons.inbox},
//     'food': {'label': 'Food', 'icon': Icons.fastfood},
//     'gift': {'label': 'Gift', 'icon': Icons.card_giftcard},
//     'electronics': {'label': 'Electronics', 'icon': Icons.devices_other},
//     'clothes': {'label': 'Clothes', 'icon': Icons.checkroom},
//     'fragile': {'label': 'Fragile', 'icon': Icons.emoji_objects},
//     'other': {'label': 'Other', 'icon': Icons.more_horiz},
//   };

//   @override
//   void initState() {
//     super.initState();
//     _searchCtrl = widget.controller; // <-- bind
//     _initLocationAndBias();

//     // seed defaults for sheet
//     _nameCtrl.text = widget.defaultSenderName ?? "";
//     _phoneCtrl.text = widget.defaultSenderMobile ?? "";

//     _searchFocus.addListener(() {
//       if (_searchFocus.hasFocus && _searchCtrl.text.trim().length >= 2) {
//         // default to LOCAL first when the field gains focus (g-service cache)
//         _showingLocal = true;
//         _searchLocal(_searchCtrl.text.trim());
//       }
//       if (!_searchFocus.hasFocus) {
//         setState(() {
//           _results = [];
//           _localResults = [];
//           _error = null;
//           _loading = false;
//         });
//       }
//     });
//   }

//   @override
//   void dispose() {
//     if (!_confirmed) {
//       _searchCtrl.clear();
//     }
//     _searchFocus.dispose();
//     _debounce?.cancel();
//     _houseCtrl.dispose();
//     _nameCtrl.dispose();
//     _phoneCtrl.dispose();
//     _instructionCtrl.dispose();
//     _pkgOtherCtrl.dispose();
//     super.dispose();
//   }

//   // ---------- Firestore cache upsert (SECONDARY g-service) ----------
//   Future<void> _upsertPlaceCache({
//     required String placeId,
//     required String name,
//     required String address,
//     required LatLng latLng,
//     String? stateName,
//   }) async {
//     final data = {
//       'placeId': placeId,
//       'name': name,
//       'name_lc': name.toLowerCase(),
//       'address': address,
//       'lat': latLng.latitude,
//       'lng': latLng.longitude,
//       'state': stateName,
//       'hits': FieldValue.increment(1),
//       'updatedAt': FieldValue.serverTimestamp(),
//       'createdAt': FieldValue.serverTimestamp(),
//     };

//     // if this place already exists, merge + increment hits
//     final existing = await _gsvc
//         .collection('places_cache')
//         .where('placeId', isEqualTo: placeId)
//         .limit(1)
//         .get();

//     if (existing.docs.isNotEmpty) {
//       await existing.docs.first.reference.set(data, SetOptions(merge: true));
//     } else {
//       await _gsvc.collection('places_cache').add(data);
//     }
//   }

//   // ---------- Init location & state ----------
//   Future<void> _initLocationAndBias() async {
//     try {
//       if (!await Geolocator.isLocationServiceEnabled()) return;

//       LocationPermission permission = await Geolocator.checkPermission();
//       if (permission == LocationPermission.denied) {
//         permission = await Geolocator.requestPermission();
//       }
//       if (permission == LocationPermission.deniedForever ||
//           permission == LocationPermission.denied) {
//         return;
//       }

//       final pos = await Geolocator.getCurrentPosition(
//         desiredAccuracy: LocationAccuracy.high,
//       );

//       final newCenter = LatLng(pos.latitude, pos.longitude);
//       final places =
//           await placemarkFromCoordinates(pos.latitude, pos.longitude);

//       if (!mounted) return;
//       setState(() {
//         _biasCenter = newCenter;
//         _currentStateName =
//             places.isNotEmpty ? places.first.administrativeArea : null;
//         _pendingCameraTarget = newCenter;
//       });

//       if (mapController != null) {
//         await mapController!.animateCamera(
//           CameraUpdate.newCameraPosition(
//             CameraPosition(target: newCenter, zoom: 15.0),
//           ),
//         );
//         _pendingCameraTarget = null;
//       }
//     } catch (_) {/* ignore and keep fallback */}
//   }

//   // ---------- Places search (Google) ----------
//   Future<void> _onChanged(String text) async {
//     _debounce?.cancel();
//     _debounce = Timer(const Duration(milliseconds: 260), () {
//       // typing => try LOCAL first (g-service cache)
//       _showingLocal = true;
//       _searchLocal(text.trim());
//     });
//   }

//   Future<void> _search(String input) async {
//     if (!_searchFocus.hasFocus) return;
//     if (input.length < 2) {
//       setState(() {
//         _results = [];
//         _localResults = [];
//         _error = null;
//         _loading = false;
//       });
//       return;
//     }

//     setState(() {
//       _loading = true;
//       _error = null;
//       _results = [];
//       _localResults = [];
//     });

//     try {
//       final places = gmws.GoogleMapsPlaces(
//         apiKey: googleApiKey,
//         apiHeaders: await const GoogleApiHeaders().getHeaders(),
//       );

//       final resp = await places.autocomplete(
//         input,
//         sessionToken: _sessionToken,
//         language: 'en',
//         components: [gmws.Component(gmws.Component.country, 'in')],
//         location: gmws.Location(
//           lat: _biasCenter.latitude,
//           lng: _biasCenter.longitude,
//         ),
//         radius: 60000,
//         strictbounds: false,
//       );

//       if (!mounted) return;

//       setState(() {
//         if (resp.isOkay) {
//           _results = resp.predictions;
//           _error = null;
//         } else {
//           _results = [];
//           _error = resp.errorMessage ?? 'No results';
//         }
//         _loading = false;
//       });
//     } catch (e) {
//       if (!mounted) return;
//       setState(() {
//         _results = [];
//         _error = e.toString();
//         _loading = false;
//       });
//     }
//   }

//   // ---------- Firebase (places_cache) search â€” SECONDARY g-service ----------
//   Future<void> _searchLocal(String input) async {
//     final q = input.trim().toLowerCase();
//     if (q.isEmpty) {
//       setState(() {
//         _localResults = [];
//         _error = 'Type to search';
//         _loading = false;
//       });
//       return;
//     }

//     setState(() {
//       _loading = true;
//       _error = null;
//       _localResults = [];
//     });

//     try {
//       final snap = await _gsvc
//           .collection('places_cache')
//           .orderBy('name_lc')
//           .startAt([q])
//           .endAt([q + '\uf8ff'])
//           .limit(25)
//           .get();

//       final items = <_LocalPlace>[];
//       for (final d in snap.docs) {
//         final data = d.data();
//         final title = (data['name'] ?? '') as String;
//         final address = (data['address'] ?? '') as String;
//         final lat = (data['lat'] as num?)?.toDouble();
//         final lng = (data['lng'] as num?)?.toDouble();

//         items.add(_LocalPlace(
//           id: d.id,
//           title: title,
//           subtitle: address,
//           latLng: (lat != null && lng != null) ? LatLng(lat, lng) : null,
//           docRef: d.reference,
//         ));
//       }

//       if (!mounted) return;
//       if (items.isNotEmpty) {
//         setState(() {
//           _localResults = items;
//           _error = null;
//           _loading = false;
//           _showingLocal = true; // stay on local list
//         });
//       } else {
//         // no local matches -> fall back to Google
//         setState(() {
//           _localResults = const [];
//           _error = null;
//           _loading = false;
//         });
//         _showingLocal = false;
//         await _search(input); // reuse your Google search
//       }
//     } catch (e) {
//       if (!mounted) return;
//       setState(() {
//         _localResults = [];
//         _error = e.toString();
//         _loading = false;
//       });
//     }
//   }

//   // ---------- Selection handlers ----------
//   Future<void> _selectPrediction(gmws.Prediction p) async {
//     _sessionToken = const Uuid().v4();

//     final places = gmws.GoogleMapsPlaces(
//       apiKey: googleApiKey,
//       apiHeaders: await const GoogleApiHeaders().getHeaders(),
//     );

//     final detail = await places.getDetailsByPlaceId(p.placeId!);
//     final geometry = detail.result.geometry;
//     if (geometry == null) return;

//     final target = LatLng(geometry.location.lat, geometry.location.lng);
//     final title = detail.result.name;
//     final fullAddress =
//         detail.result.formattedAddress ?? (p.description ?? title);

//     // pull state (administrative_area_level_1) if present
//     String? stateName = detail.result.addressComponents
//         .firstWhere(
//           (c) => c.types.contains('administrative_area_level_1'),
//           orElse: () =>
//               gmws.AddressComponent(longName: '', shortName: '', types: []),
//         )
//         .longName;
//     if (stateName?.isEmpty ?? true) stateName = _currentStateName;

//     // ðŸ”¥ save/merge into g-service cache
//     await _upsertPlaceCache(
//       placeId: p.placeId!,
//       name: title,
//       address: fullAddress,
//       latLng: target,
//       stateName: stateName,
//     );

//     // (existing UI updates)
//     setState(() {
//       _biasCenter = target;
//       _currentStateName = stateName;
//       _markers
//         ..clear()
//         ..add(Marker(
//           markerId: const MarkerId('picked'),
//           position: target,
//           infoWindow: InfoWindow(title: title, snippet: fullAddress),
//         ));
//       _pendingAddressTitle = title;
//       _pendingFullAddress = fullAddress;
//       _pendingLatLng = target;
//     });

//     await mapController?.animateCamera(
//       CameraUpdate.newCameraPosition(
//           CameraPosition(target: target, zoom: 16.0)),
//     );

//     _showConfirmSheet();
//   }

//   Future<void> _selectLocal(_LocalPlace item) async {
//     final target = item.latLng;
//     if (target == null) return;

//     setState(() {
//       _biasCenter = target;
//       _markers
//         ..clear()
//         ..add(
//           Marker(
//             markerId: const MarkerId('picked'),
//             position: target,
//             infoWindow: InfoWindow(title: item.title, snippet: item.subtitle),
//           ),
//         );
//       _pendingAddressTitle = item.title;
//       _pendingFullAddress = item.subtitle;
//       _pendingLatLng = target;
//     });

//     // bump hits on the SAME g-service document
//     await item.docRef.set({
//       'hits': FieldValue.increment(1),
//       'updatedAt': FieldValue.serverTimestamp(),
//     }, SetOptions(merge: true));

//     await mapController?.animateCamera(
//       CameraUpdate.newCameraPosition(
//         CameraPosition(target: target, zoom: 16.0),
//       ),
//     );

//     _showConfirmSheet();
//   }

//   // ---------- Confirm sheet ----------
//   Future<void> _showConfirmSheet() async {
//     final String userMobile =
//         widget.defaultSenderMobile ?? _phoneCtrl.text; // optional default

//     await showModalBottomSheet(
//       context: context,
//       isScrollControlled: true,
//       backgroundColor: Colors.white,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.vertical(
//           top: Radius.circular(MediaQuery.of(context).size.width * .05),
//         ),
//       ),
//       builder: (ctx) {
//         final width = MediaQuery.of(ctx).size.width;
//         final bottomInset = MediaQuery.of(ctx).viewInsets.bottom;
//         final inputH = width * .105; // uniform height

//         Widget buildLinedField({
//           required TextEditingController controller,
//           required String hint,
//           TextInputType? keyboardType,
//           Widget? suffixIcon,
//           bool enabled = true,
//         }) {
//           return SizedBox(
//             height: inputH,
//             child: TextField(
//               controller: controller,
//               keyboardType: keyboardType,
//               enabled: enabled,
//               maxLines: 1,
//               textAlignVertical: TextAlignVertical.center,
//               style: TextStyle(fontSize: width * .034),
//               decoration: InputDecoration(
//                 hintText: hint,
//                 hintStyle: TextStyle(fontSize: width * .032),
//                 contentPadding: EdgeInsets.symmetric(
//                   horizontal: width * .035,
//                 ),
//                 suffixIcon: suffixIcon,
//                 filled: true,
//                 fillColor: Colors.white,
//                 border: OutlineInputBorder(
//                   borderRadius: BorderRadius.circular(width * .03),
//                   borderSide: const BorderSide(color: Color(0xFFDFE3EA)),
//                 ),
//                 enabledBorder: OutlineInputBorder(
//                   borderRadius: BorderRadius.circular(width * .03),
//                   borderSide: const BorderSide(color: Color(0xFFDFE3EA)),
//                 ),
//                 focusedBorder: OutlineInputBorder(
//                   borderRadius: BorderRadius.circular(width * .03),
//                   borderSide: const BorderSide(color: Color(0xFF2F6BFF)),
//                 ),
//               ),
//             ),
//           );
//         }

//         return StatefulBuilder(
//           builder: (ctx, setSheet) {
//             bool canConfirm() =>
//                 _nameCtrl.text.trim().isNotEmpty &&
//                 _phoneCtrl.text.trim().isNotEmpty &&
//                 _pkgSelectedKey != null; // must select one item in grid

//             String? pkgLabel() {
//               if (_pkgSelectedKey == null) return null;
//               if (_pkgSelectedKey == 'other') {
//                 final custom = _pkgOtherCtrl.text.trim();
//                 return custom.isNotEmpty ? custom : 'Other';
//               }
//               return _packageTypeMap[_pkgSelectedKey!]!['label'] as String;
//             }

//             return Padding(
//               padding: EdgeInsets.only(bottom: bottomInset),
//               child: SafeArea(
//                 top: false,
//                 child: SingleChildScrollView(
//                   child: Column(
//                     mainAxisSize: MainAxisSize.min,
//                     crossAxisAlignment: CrossAxisAlignment.start,
//                     children: [
//                       // drag handle
//                       Center(
//                         child: Container(
//                           width: width * .18,
//                           height: width * .013,
//                           margin: EdgeInsets.only(
//                               bottom: width * .03, top: width * .02),
//                           decoration: BoxDecoration(
//                             color: Colors.black12,
//                             borderRadius: BorderRadius.circular(width * .01),
//                           ),
//                         ),
//                       ),

//                       Padding(
//                         padding: EdgeInsets.symmetric(
//                           horizontal: width * .05,
//                           vertical: width * .02,
//                         ),
//                         child: Column(
//                           mainAxisSize: MainAxisSize.min,
//                           crossAxisAlignment: CrossAxisAlignment.start,
//                           children: [
//                             // Location row
//                             Row(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: [
//                                 Icon(Icons.place,
//                                     color: Colors.green, size: width * .05),
//                                 SizedBox(width: width * .02),
//                                 Expanded(
//                                   child: Column(
//                                     crossAxisAlignment:
//                                         CrossAxisAlignment.start,
//                                     children: [
//                                       Text(
//                                         _pendingAddressTitle ?? widget.label,
//                                         style: TextStyle(
//                                           fontSize: width * .04,
//                                           fontWeight: FontWeight.w700,
//                                         ),
//                                       ),
//                                       SizedBox(height: width * .01),
//                                       Text(
//                                         _pendingFullAddress ?? '',
//                                         style: TextStyle(
//                                           color: Colors.black87,
//                                           height: 1.2,
//                                           fontSize: width * .032,
//                                         ),
//                                       ),
//                                     ],
//                                   ),
//                                 ),
//                                 TextButton(
//                                   onPressed: () => Navigator.pop(ctx),
//                                   child: Text("Change",
//                                       style: TextStyle(fontSize: width * .032)),
//                                 ),
//                               ],
//                             ),
//                             SizedBox(height: width * .03),

//                             // House/Shop
//                             buildLinedField(
//                               controller: _houseCtrl,
//                               hint: "House / Apartment / Shop (optional)",
//                             ),
//                             SizedBox(height: width * .02),

//                             // Sender name
//                             Text("Sender's Name",
//                                 style: TextStyle(
//                                     fontSize: width * .032,
//                                     fontWeight: FontWeight.w500)),
//                             SizedBox(height: width * .01),
//                             SizedBox(
//                               height: inputH,
//                               child: TextField(
//                                 controller: _nameCtrl,
//                                 onChanged: (_) => setSheet(() {}),
//                                 maxLines: 1,
//                                 textAlignVertical: TextAlignVertical.center,
//                                 style: TextStyle(fontSize: width * .034),
//                                 decoration: InputDecoration(
//                                   hintText: "Enter sender name",
//                                   hintStyle: TextStyle(fontSize: width * .032),
//                                   contentPadding: EdgeInsets.symmetric(
//                                       horizontal: width * .035),
//                                   filled: true,
//                                   fillColor: Colors.white,
//                                   border: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   enabledBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   focusedBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFF2F6BFF)),
//                                   ),
//                                   suffixIcon: Icon(Icons.recent_actors_outlined,
//                                       size: width * .05),
//                                 ),
//                               ),
//                             ),
//                             SizedBox(height: width * .02),

//                             // Sender phone
//                             Text("Sender's Mobile number",
//                                 style: TextStyle(
//                                     fontSize: width * .032,
//                                     fontWeight: FontWeight.w500)),
//                             SizedBox(height: width * .01),
//                             SizedBox(
//                               height: inputH,
//                               child: TextField(
//                                 controller: _phoneCtrl,
//                                 keyboardType: TextInputType.phone,
//                                 onChanged: (_) => setSheet(() {}),
//                                 maxLines: 1,
//                                 textAlignVertical: TextAlignVertical.center,
//                                 style: TextStyle(fontSize: width * .034),
//                                 decoration: InputDecoration(
//                                   hintText: "Enter mobile number",
//                                   hintStyle: TextStyle(fontSize: width * .032),
//                                   contentPadding: EdgeInsets.symmetric(
//                                       horizontal: width * .035),
//                                   filled: true,
//                                   fillColor: Colors.white,
//                                   border: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   enabledBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   focusedBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFF2F6BFF)),
//                                   ),
//                                 ),
//                               ),
//                             ),
//                             SizedBox(height: width * .01),

//                             // Use my mobile checkbox
//                             Row(
//                               children: [
//                                 SizedBox(
//                                   width: width * .06,
//                                   height: width * .06,
//                                   child: Checkbox(
//                                     value: _useMyMobile,
//                                     onChanged: (v) {
//                                       setSheet(() {
//                                         _useMyMobile = v ?? false;
//                                         if (_useMyMobile &&
//                                             userMobile.isNotEmpty) {
//                                           _phoneCtrl.text = userMobile;
//                                         }
//                                       });
//                                     },
//                                   ),
//                                 ),
//                                 SizedBox(width: width * .02),
//                                 Expanded(
//                                   child: Text(
//                                     "Use my mobile number${userMobile.isNotEmpty ? " : $userMobile" : ""}",
//                                     style: TextStyle(fontSize: width * .032),
//                                   ),
//                                 ),
//                               ],
//                             ),

//                             SizedBox(height: width * .03),

//                             // Package Type
//                             Text(
//                               "Package Type (required)",
//                               style: TextStyle(
//                                   fontSize: width * .034,
//                                   fontWeight: FontWeight.w700),
//                             ),
//                             SizedBox(height: width * .02),

//                             GridView.builder(
//                               padding: EdgeInsets.zero,
//                               shrinkWrap: true,
//                               physics: const NeverScrollableScrollPhysics(),
//                               itemCount: _packageTypeMap.keys.toList().length,
//                               gridDelegate:
//                                   SliverGridDelegateWithFixedCrossAxisCount(
//                                 crossAxisCount: 4,
//                                 mainAxisSpacing: width * 0.02,
//                                 crossAxisSpacing: width * 0.02,
//                                 childAspectRatio: 1,
//                               ),
//                               itemBuilder: (context, index) {
//                                 final key =
//                                     _packageTypeMap.keys.toList()[index];
//                                 return _buildPackageTile(key, setSheet, width);
//                               },
//                             ),

//                             if (_showPkgOtherField) ...[
//                               SizedBox(height: width * .02),
//                               SizedBox(
//                                 height: inputH,
//                                 child: TextField(
//                                   controller: _pkgOtherCtrl,
//                                   maxLines: 1,
//                                   textAlignVertical: TextAlignVertical.center,
//                                   style: TextStyle(fontSize: width * .034),
//                                   decoration: const InputDecoration(
//                                     labelText: "Enter package type",
//                                     border: OutlineInputBorder(),
//                                   ),
//                                 ),
//                               ),
//                             ],

//                             SizedBox(height: width * .03),

//                             // Instruction (single-line, same height)
//                             Text(
//                               "Courier instruction (optional)",
//                               style: TextStyle(
//                                   fontSize: width * .032,
//                                   fontWeight: FontWeight.w500),
//                             ),
//                             SizedBox(height: width * .01),
//                             SizedBox(
//                               height: inputH,
//                               child: TextField(
//                                 controller: _instructionCtrl,
//                                 maxLines: 1,
//                                 textAlignVertical: TextAlignVertical.center,
//                                 style: TextStyle(fontSize: width * .034),
//                                 decoration: InputDecoration(
//                                   hintText:
//                                       "E.g. call on arrival, leave with security, fragile, etc.",
//                                   hintStyle: TextStyle(fontSize: width * .032),
//                                   contentPadding: EdgeInsets.symmetric(
//                                       horizontal: width * .035),
//                                   filled: true,
//                                   fillColor: Colors.white,
//                                   border: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   enabledBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFFDFE3EA)),
//                                   ),
//                                   focusedBorder: OutlineInputBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .03),
//                                     borderSide: const BorderSide(
//                                         color: Color(0xFF2F6BFF)),
//                                   ),
//                                 ),
//                               ),
//                             ),

//                             SizedBox(height: width * .04),

//                             // Confirm button
//                             SizedBox(
//                               width: double.infinity,
//                               child: ElevatedButton(
//                                 style: ElevatedButton.styleFrom(
//                                   backgroundColor: canConfirm()
//                                       ? const Color(0xFF2F6BFF)
//                                       : const Color(0xFFBFC7DB),
//                                   foregroundColor: Colors.white,
//                                   padding: EdgeInsets.symmetric(
//                                     vertical: width * .04,
//                                     horizontal: width * .035,
//                                   ),
//                                   shape: RoundedRectangleBorder(
//                                     borderRadius:
//                                         BorderRadius.circular(width * .035),
//                                   ),
//                                 ),
//                                 onPressed: canConfirm()
//                                     ? () async {
//                                         _confirmed = true;

//                                         // write address back to parent textfield
//                                         if (_pendingFullAddress != null) {
//                                           _searchCtrl.text =
//                                               _pendingFullAddress!;
//                                         }

//                                         final String? pkgKey = _pkgSelectedKey;
//                                         final String? pkgText = pkgLabel();
//                                         final String? pkgCustom =
//                                             _showPkgOtherField &&
//                                                     _pkgOtherCtrl.text
//                                                         .trim()
//                                                         .isNotEmpty
//                                                 ? _pkgOtherCtrl.text.trim()
//                                                 : null;

//                                         // EXAMPLE (MAIN DB): if you want to create an order, use _main
//                                         // await _main.collection('d2d_requests').add({
//                                         //   'label': widget.label,
//                                         //   'address': _pendingFullAddress ?? _searchCtrl.text,
//                                         //   'lat': _pendingLatLng?.latitude,
//                                         //   'lng': _pendingLatLng?.longitude,
//                                         //   'house': _houseCtrl.text.trim(),
//                                         //   'senderName': _nameCtrl.text.trim(),
//                                         //   'senderPhone': _phoneCtrl.text.trim(),
//                                         //   'instruction': _instructionCtrl.text.trim(),
//                                         //   'packageTypeKey': pkgKey,
//                                         //   'packageTypeLabel': pkgText,
//                                         //   'packageTypeCustom': pkgCustom,
//                                         //   'createdAt': FieldValue.serverTimestamp(),
//                                         // });

//                                         Navigator.pop(ctx);
//                                         Navigator.of(context).pop({
//                                           'address': _pendingFullAddress ??
//                                               _searchCtrl.text,
//                                           'latLng': _pendingLatLng,
//                                           'label': widget.label,
//                                           'house': _houseCtrl.text.trim(),
//                                           'senderName': _nameCtrl.text.trim(),
//                                           'senderPhone': _phoneCtrl.text.trim(),
//                                           'instruction':
//                                               _instructionCtrl.text.trim(),
//                                           'packageTypeKey': pkgKey,
//                                           'packageTypeLabel': pkgText,
//                                           'packageTypeCustom': pkgCustom,
//                                         });
//                                       }
//                                     : null,
//                                 child: Text(
//                                   "Confirm and Proceed",
//                                   style: TextStyle(
//                                     fontWeight: FontWeight.w700,
//                                     fontSize: width * .036,
//                                   ),
//                                 ),
//                               ),
//                             ),
//                             if (!canConfirm())
//                               Padding(
//                                 padding: EdgeInsets.only(top: width * .02),
//                                 child: Text(
//                                   "Select a package type, and enter sender name & mobile number to continue.",
//                                   style: TextStyle(
//                                     color: Colors.red.shade600,
//                                     fontSize: width * .03,
//                                     fontWeight: FontWeight.w500,
//                                   ),
//                                 ),
//                               ),
//                           ],
//                         ),
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             );
//           },
//         );
//       },
//     );
//   }

//   Widget _buildPackageTile(
//     String key,
//     void Function(VoidCallback) setSheet,
//     double width,
//   ) {
//     final item = _packageTypeMap[key]!;
//     final bool isSelected = _pkgSelectedKey == key;

//     return GestureDetector(
//       onTap: () {
//         setSheet(() {
//           _pkgSelectedKey = key;
//           if (!_showPkgOtherField) _pkgOtherCtrl.clear();
//         });
//       },
//       child: Container(
//         decoration: BoxDecoration(
//           color: isSelected ? Colors.blue.withOpacity(0.05) : null,
//           border: Border.all(
//             color: isSelected ? Colors.blue : Colors.black.withOpacity(0.25),
//             width: isSelected ? width * 0.005 : width * 0.003,
//           ),
//           borderRadius: BorderRadius.circular(width * 0.025),
//         ),
//         padding: EdgeInsets.symmetric(vertical: width * 0.02),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Icon(
//               item['icon'] as IconData,
//               color: isSelected ? Colors.blue : Colors.black,
//               size: width * 0.07,
//             ),
//             SizedBox(height: width * 0.015),
//             Text(
//               item['label'] as String,
//               textAlign: TextAlign.center,
//               style: TextStyle(
//                 fontSize: width * 0.025,
//                 color: isSelected ? Colors.blue : Colors.black,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     final width = MediaQuery.of(context).size.width; // <-- width*
//     final double spacerTop = width * .05;
//     final double fieldHeight = width * .105;
//     final double panelPad = width * .0125;
//     final double cardRadius = width * .03;
//     final double borderWidth = width * .005;
//     final double iconSize = width * .034;
//     final double gap = width * .01;

//     final String hintText = 'Search ${widget.label.toLowerCase()} location';

//     return Scaffold(
//       body: GestureDetector(
//         onTap: () => FocusScope.of(context).unfocus(),
//         behavior: HitTestBehavior.translucent,
//         child: Stack(
//           children: [
//             GoogleMap(
//               initialCameraPosition: _initialPosition,
//               onMapCreated: (controller) async {
//                 mapController = controller;
//                 if (_pendingCameraTarget != null) {
//                   await mapController!.animateCamera(
//                     CameraUpdate.newCameraPosition(
//                       CameraPosition(target: _pendingCameraTarget!, zoom: 15.0),
//                     ),
//                   );
//                   _pendingCameraTarget = null;
//                 }
//               },
//               myLocationEnabled: true,
//               myLocationButtonEnabled: true,
//               zoomControlsEnabled: false,
//               markers: _markers,
//               onCameraMove: (pos) => _biasCenter = pos.target,
//             ),

//             // Search + suggestions
//             SafeArea(
//               child: SizedBox(
//                 width: width * 1,
//                 child: Column(
//                   children: [
//                     SizedBox(height: spacerTop),
//                     Row(
//                       mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: [
//                         // colored leading dot
//                         SizedBox(
//                           height: fieldHeight,
//                           child: Center(
//                             child: Container(
//                               width: width * 0.04,
//                               height: width * 0.04,
//                               decoration: BoxDecoration(
//                                 border: Border.all(
//                                   width: width * .005,
//                                   color: Colors.black.withOpacity(.25),
//                                 ),
//                                 color: widget.accentColor,
//                                 shape: BoxShape.circle,
//                               ),
//                               child: Center(
//                                 child: Container(
//                                   width: width * 0.02,
//                                   height: width * 0.02,
//                                   decoration: BoxDecoration(
//                                     color: Colors.black.withOpacity(0.5),
//                                     shape: BoxShape.circle,
//                                   ),
//                                 ),
//                               ),
//                             ),
//                           ),
//                         ),

//                         // Search field + suggestion panel
//                         Container(
//                           width: width * .82,
//                           decoration:
//                               const BoxDecoration(color: Colors.transparent),
//                           child: Column(
//                             crossAxisAlignment: CrossAxisAlignment.stretch,
//                             children: [
//                               // search field
//                               Container(
//                                 height: fieldHeight,
//                                 decoration: BoxDecoration(
//                                   color: Colors.white,
//                                   borderRadius:
//                                       BorderRadius.circular(width * .035),
//                                   boxShadow: [
//                                     BoxShadow(
//                                       color: Colors.black.withOpacity(0.12),
//                                       blurRadius: width * .02,
//                                       offset: Offset(0, width * .0075),
//                                     ),
//                                   ],
//                                 ),
//                                 child: TextField(
//                                   controller: _searchCtrl,
//                                   focusNode: _searchFocus,
//                                   onChanged: _onChanged,
//                                   textInputAction: TextInputAction.search,
//                                   decoration: InputDecoration(
//                                     hintText: hintText,
//                                     hintStyle:
//                                         TextStyle(fontSize: width * .032),
//                                     prefixIcon: Icon(
//                                       Icons.search,
//                                       size: iconSize,
//                                       color: widget.accentColor,
//                                     ),
//                                     suffixIcon: _searchCtrl.text.isEmpty
//                                         ? null
//                                         : IconButton(
//                                             icon: Icon(Icons.close,
//                                                 size: iconSize),
//                                             onPressed: () {
//                                               setState(() {
//                                                 _searchCtrl.clear();
//                                                 _results = [];
//                                                 _localResults = [];
//                                                 _error = null;
//                                               });
//                                             },
//                                           ),
//                                     border: InputBorder.none,
//                                     contentPadding:
//                                         EdgeInsets.only(top: width * .0125),
//                                   ),
//                                   style: TextStyle(fontSize: width * .035),
//                                 ),
//                               ),

//                               SizedBox(height: gap),

//                               // suggestion panel (INLINE)
//                               if (_searchFocus.hasFocus &&
//                                   (_loading ||
//                                       (!_showingLocal && _results.isNotEmpty) ||
//                                       (_showingLocal &&
//                                           _localResults.isNotEmpty) ||
//                                       (_error != null &&
//                                           _searchCtrl.text.isNotEmpty)))
//                                 Container(
//                                   padding: EdgeInsets.all(panelPad),
//                                   decoration: BoxDecoration(
//                                     color: const Color(0xFFEDEDED),
//                                     borderRadius:
//                                         BorderRadius.circular(width * .04),
//                                     border: Border.all(
//                                       color: Colors.black26,
//                                       width: borderWidth,
//                                     ),
//                                     boxShadow: [
//                                       BoxShadow(
//                                         color: Colors.black.withOpacity(.18),
//                                         blurRadius: width * .03,
//                                         offset: Offset(0, width * .01),
//                                       ),
//                                     ],
//                                   ),
//                                   child: Column(
//                                     children: [
//                                       Align(
//                                         alignment: Alignment.centerLeft,
//                                         child: Padding(
//                                           padding: EdgeInsets.symmetric(
//                                               vertical: gap * .5,
//                                               horizontal: gap * .5),
//                                           child: Text(
//                                             _showingLocal
//                                                 ? "from g-service cache"
//                                                 : "popular locations near you",
//                                             style: TextStyle(
//                                               fontSize: width * .028,
//                                               color: Colors.black54,
//                                               fontWeight: FontWeight.w500,
//                                             ),
//                                           ),
//                                         ),
//                                       ),
//                                       if (_loading)
//                                         SizedBox(
//                                           height: width * .08,
//                                           child: const Center(
//                                               child:
//                                                   CupertinoActivityIndicator()),
//                                         )
//                                       else if (_error != null)
//                                         Padding(
//                                           padding: EdgeInsets.all(width * .01),
//                                           child: Text(
//                                             _error!,
//                                             style: TextStyle(
//                                               color: Colors.redAccent,
//                                               fontSize: width * .032,
//                                             ),
//                                           ),
//                                         )
//                                       else if (!_showingLocal &&
//                                           _results.isNotEmpty)
//                                         // GOOGLE results list
//                                         ListView.separated(
//                                           padding: EdgeInsets.zero,
//                                           shrinkWrap: true,
//                                           itemCount: _results.length,
//                                           separatorBuilder: (_, __) =>
//                                               SizedBox(height: gap * .6),
//                                           itemBuilder: (context, i) {
//                                             final p = _results[i];
//                                             final main = p.structuredFormatting
//                                                     ?.mainText ??
//                                                 (p.description ?? '');
//                                             final secondary = p
//                                                     .structuredFormatting
//                                                     ?.secondaryText ??
//                                                 '';
//                                             return InkWell(
//                                               onTap: () => _selectPrediction(p),
//                                               borderRadius:
//                                                   BorderRadius.circular(
//                                                       cardRadius),
//                                               child: Container(
//                                                 padding: EdgeInsets.symmetric(
//                                                   horizontal: width * .022,
//                                                   vertical: width * .018,
//                                                 ),
//                                                 decoration: BoxDecoration(
//                                                   color: Colors.white,
//                                                   borderRadius:
//                                                       BorderRadius.circular(
//                                                           cardRadius),
//                                                   boxShadow: [
//                                                     BoxShadow(
//                                                       color: Colors.black
//                                                           .withOpacity(.06),
//                                                       blurRadius: width * .02,
//                                                       offset: Offset(
//                                                           0, width * .005),
//                                                     ),
//                                                   ],
//                                                 ),
//                                                 child: Row(
//                                                   crossAxisAlignment:
//                                                       CrossAxisAlignment.start,
//                                                   children: [
//                                                     Container(
//                                                       width: width * .06,
//                                                       height: width * .06,
//                                                       decoration: BoxDecoration(
//                                                         shape: BoxShape.circle,
//                                                         color: widget
//                                                             .accentColor
//                                                             .withOpacity(.12),
//                                                       ),
//                                                       child: Icon(
//                                                         Icons.place_outlined,
//                                                         size: iconSize,
//                                                         color:
//                                                             widget.accentColor,
//                                                       ),
//                                                     ),
//                                                     SizedBox(
//                                                         width: width * .02),
//                                                     Expanded(
//                                                       child: Column(
//                                                         crossAxisAlignment:
//                                                             CrossAxisAlignment
//                                                                 .start,
//                                                         children: [
//                                                           Text(
//                                                             main,
//                                                             maxLines: 2,
//                                                             overflow:
//                                                                 TextOverflow
//                                                                     .ellipsis,
//                                                             style: TextStyle(
//                                                               fontSize:
//                                                                   width * .034,
//                                                               fontWeight:
//                                                                   FontWeight
//                                                                       .w600,
//                                                             ),
//                                                           ),
//                                                           if (secondary
//                                                               .isNotEmpty) ...[
//                                                             SizedBox(
//                                                                 height: width *
//                                                                     .005),
//                                                             Text(
//                                                               secondary,
//                                                               maxLines: 2,
//                                                               overflow:
//                                                                   TextOverflow
//                                                                       .ellipsis,
//                                                               style: TextStyle(
//                                                                 fontSize:
//                                                                     width *
//                                                                         .028,
//                                                                 color: Colors
//                                                                     .black
//                                                                     .withOpacity(
//                                                                         .6),
//                                                               ),
//                                                             ),
//                                                           ],
//                                                         ],
//                                                       ),
//                                                     ),
//                                                     SizedBox(
//                                                         width: width * .01),
//                                                     Icon(Icons.north_east,
//                                                         size: iconSize,
//                                                         color: Colors.black45),
//                                                   ],
//                                                 ),
//                                               ),
//                                             );
//                                           },
//                                         )
//                                       else if (_showingLocal &&
//                                           _localResults.isNotEmpty)
//                                         // FIREBASE results list (g-service)
//                                         ListView.separated(
//                                           padding: EdgeInsets.zero,
//                                           shrinkWrap: true,
//                                           itemCount: _localResults.length,
//                                           separatorBuilder: (_, __) =>
//                                               SizedBox(height: gap * .6),
//                                           itemBuilder: (context, i) {
//                                             final item = _localResults[i];
//                                             return InkWell(
//                                               onTap: () => _selectLocal(item),
//                                               borderRadius:
//                                                   BorderRadius.circular(
//                                                       cardRadius),
//                                               child: Container(
//                                                 padding: EdgeInsets.symmetric(
//                                                   horizontal: width * .022,
//                                                   vertical: width * .018,
//                                                 ),
//                                                 decoration: BoxDecoration(
//                                                   color: Colors.white,
//                                                   borderRadius:
//                                                       BorderRadius.circular(
//                                                           cardRadius),
//                                                   boxShadow: [
//                                                     BoxShadow(
//                                                       color: Colors.black
//                                                           .withOpacity(.06),
//                                                       blurRadius: width * .02,
//                                                       offset: Offset(
//                                                           0, width * .005),
//                                                     ),
//                                                   ],
//                                                 ),
//                                                 child: Row(
//                                                   crossAxisAlignment:
//                                                       CrossAxisAlignment.start,
//                                                   children: [
//                                                     Container(
//                                                       width: width * .06,
//                                                       height: width * .06,
//                                                       decoration: BoxDecoration(
//                                                         shape: BoxShape.circle,
//                                                         color: Colors.green
//                                                             .withOpacity(.12),
//                                                       ),
//                                                       child: Icon(
//                                                         Icons
//                                                             .cloud_done_outlined,
//                                                         size: iconSize,
//                                                         color: Colors.green,
//                                                       ),
//                                                     ),
//                                                     SizedBox(
//                                                         width: width * .02),
//                                                     Expanded(
//                                                       child: Column(
//                                                         crossAxisAlignment:
//                                                             CrossAxisAlignment
//                                                                 .start,
//                                                         children: [
//                                                           Text(
//                                                             item.title,
//                                                             maxLines: 2,
//                                                             overflow:
//                                                                 TextOverflow
//                                                                     .ellipsis,
//                                                             style: TextStyle(
//                                                               fontSize:
//                                                                   width * .034,
//                                                               fontWeight:
//                                                                   FontWeight
//                                                                       .w600,
//                                                             ),
//                                                           ),
//                                                           if (item.subtitle
//                                                               .isNotEmpty) ...[
//                                                             SizedBox(
//                                                                 height: width *
//                                                                     .005),
//                                                             Text(
//                                                               item.subtitle,
//                                                               maxLines: 2,
//                                                               overflow:
//                                                                   TextOverflow
//                                                                       .ellipsis,
//                                                               style: TextStyle(
//                                                                 fontSize:
//                                                                     width *
//                                                                         .028,
//                                                                 color: Colors
//                                                                     .black
//                                                                     .withOpacity(
//                                                                         .6),
//                                                               ),
//                                                             ),
//                                                           ],
//                                                         ],
//                                                       ),
//                                                     ),
//                                                     SizedBox(
//                                                         width: width * .01),
//                                                     Icon(Icons.north_east,
//                                                         size: iconSize,
//                                                         color: Colors.black45),
//                                                   ],
//                                                 ),
//                                               ),
//                                             );
//                                           },
//                                         )
//                                       else
//                                         // skeletons
//                                         Column(
//                                           children: List.generate(4, (i) {
//                                             return Container(
//                                               margin: EdgeInsets.symmetric(
//                                                 vertical: gap * .6,
//                                               ),
//                                               decoration: BoxDecoration(
//                                                 color: Colors.white,
//                                                 borderRadius:
//                                                     BorderRadius.circular(
//                                                         cardRadius),
//                                                 boxShadow: [
//                                                   BoxShadow(
//                                                     color: Colors.black
//                                                         .withOpacity(.06),
//                                                     blurRadius: width * .02,
//                                                     offset:
//                                                         Offset(0, width * .005),
//                                                   ),
//                                                 ],
//                                               ),
//                                               padding: EdgeInsets.symmetric(
//                                                 horizontal: width * .022,
//                                                 vertical: width * .018,
//                                               ),
//                                               child:
//                                                   SizedBox(height: width * .03),
//                                             );
//                                           }),
//                                         ),
//                                       SizedBox(height: gap),
//                                       Align(
//                                         alignment: Alignment.centerRight,
//                                         child: GestureDetector(
//                                           onTap: () async {
//                                             // Toggle: Google <-> Firebase
//                                             setState(() {
//                                               _error = null;
//                                             });
//                                             if (_showingLocal) {
//                                               _showingLocal = false;
//                                               // back to Google list (reuse current text)
//                                               await _search(
//                                                   _searchCtrl.text.trim());
//                                             } else {
//                                               _showingLocal = true;
//                                               await _searchLocal(
//                                                   _searchCtrl.text.trim());
//                                             }
//                                           },
//                                           child: Container(
//                                             decoration: BoxDecoration(
//                                               color: Colors.white,
//                                               border: Border.all(
//                                                 color: Colors.black26,
//                                                 width: width * .003,
//                                               ),
//                                               borderRadius:
//                                                   BorderRadius.circular(
//                                                       width * .02),
//                                             ),
//                                             child: Padding(
//                                               padding:
//                                                   EdgeInsets.all(width * .008),
//                                               child: Text(
//                                                 _showingLocal
//                                                     ? "show Google results"
//                                                     : "show places cache",
//                                                 style: TextStyle(
//                                                   fontSize: width * .028,
//                                                   color: Colors.black54,
//                                                   fontWeight: FontWeight.w500,
//                                                 ),
//                                               ),
//                                             ),
//                                           ),
//                                         ),
//                                       ),
//                                     ],
//                                   ),
//                                 ),
//                             ],
//                           ),
//                         ),
//                       ],
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
