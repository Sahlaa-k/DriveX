// D2D_placeSearchPage.dart
import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

// Google Places (http ^1.x friendly)
import 'package:flutter_google_places_hoc081098/google_maps_webservice_places.dart'
    as gmws;
import 'package:google_api_headers/google_api_headers.dart';

// Current location + reverse geocoding
import 'package:geolocator/geolocator.dart';
import 'package:geocoding/geocoding.dart';
import 'package:uuid/uuid.dart';

class D2D_placeSearch extends StatefulWidget {
  const D2D_placeSearch({
    super.key,
    required this.controller, // bound parent field
    required this.accentColor, // green/red
    required this.label, // "Pickup" or "Destination X"
    this.defaultSenderName,
    this.defaultSenderMobile,
  });

  final TextEditingController controller;
  final Color accentColor;
  final String label;
  final String? defaultSenderName;
  final String? defaultSenderMobile;

  @override
  State<D2D_placeSearch> createState() => _D2D_placeSearchState();
}

class _D2D_placeSearchState extends State<D2D_placeSearch> {
  final String googleApiKey = "AIzaSyDwD1BJXVxky_Cy6xzyQh_5A2PW9cTOO0I";

  GoogleMapController? mapController;

  // Search state
  late TextEditingController _searchCtrl;
  final FocusNode _searchFocus = FocusNode();
  Timer? _debounce;
  String _sessionToken = const Uuid().v4();

  List<gmws.Prediction> _results = [];
  bool _loading = false;
  String? _error;

  // Location/state
  LatLng _biasCenter = const LatLng(10.8505, 76.2711); // fallback: Kerala
  String? _currentStateName;
  LatLng? _pendingCameraTarget;

  // Map/markers
  final Set<Marker> _markers = {};
  final CameraPosition _initialPosition = const CameraPosition(
    target: LatLng(10.8505, 76.2711),
    zoom: 14.0,
  );

  // Confirm sheet temp values
  String? _pendingAddressTitle;
  String? _pendingFullAddress;
  LatLng? _pendingLatLng;

  // Confirm sheet controllers
  final TextEditingController _houseCtrl = TextEditingController();
  final TextEditingController _nameCtrl = TextEditingController();
  final TextEditingController _phoneCtrl = TextEditingController();
  final TextEditingController _instructionCtrl = TextEditingController();
  bool _useMyMobile = false;

  // Track if user completed confirmation
  bool _confirmed = false;

  @override
  void initState() {
    super.initState();
    _searchCtrl = widget.controller; // bind parent controller
    _initLocationAndBias();

    // seed defaults
    _nameCtrl.text = widget.defaultSenderName ?? "";
    _phoneCtrl.text = widget.defaultSenderMobile ?? "";

    _searchFocus.addListener(() {
      if (_searchFocus.hasFocus && _searchCtrl.text.trim().length >= 2) {
        _search(_searchCtrl.text.trim());
      }
      if (!_searchFocus.hasFocus) {
        setState(() {
          _results = [];
          _error = null;
          _loading = false;
        });
      }
    });
  }

  @override
  void dispose() {
    // If you prefer to preserve typed text when user goes back without confirming,
    // comment out the next 3 lines.
    if (!_confirmed) {
      _searchCtrl.clear();
    }
    _searchFocus.dispose();
    _debounce?.cancel();
    _houseCtrl.dispose();
    _nameCtrl.dispose();
    _phoneCtrl.dispose();
    _instructionCtrl.dispose();
    super.dispose();
  }

  // ---------- Init location ----------
  Future<void> _initLocationAndBias() async {
    try {
      if (!await Geolocator.isLocationServiceEnabled()) return;

      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
      }
      if (permission == LocationPermission.deniedForever ||
          permission == LocationPermission.denied) {
        return;
      }

      final pos = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      final newCenter = LatLng(pos.latitude, pos.longitude);
      final places =
          await placemarkFromCoordinates(pos.latitude, pos.longitude);

      setState(() {
        _biasCenter = newCenter;
        _currentStateName =
            places.isNotEmpty ? places.first.administrativeArea : null;
        _pendingCameraTarget = newCenter;
      });

      if (mapController != null) {
        await mapController!.animateCamera(
          CameraUpdate.newCameraPosition(
            CameraPosition(target: newCenter, zoom: 15.0),
          ),
        );
        _pendingCameraTarget = null;
      }
    } catch (_) {
      // ignore and keep fallback
    }
  }

  // ---------- Places search ----------
  Future<void> _onChanged(String text) async {
    _debounce?.cancel();
    _debounce = Timer(const Duration(milliseconds: 260), () {
      _search(text.trim());
    });
  }

  Future<void> _search(String input) async {
    if (!_searchFocus.hasFocus) return;
    if (input.length < 2) {
      setState(() {
        _results = [];
        _error = null;
        _loading = false;
      });
      return;
    }

    setState(() {
      _loading = true;
      _error = null;
    });

    try {
      final places = gmws.GoogleMapsPlaces(
        apiKey: googleApiKey,
        apiHeaders: await const GoogleApiHeaders().getHeaders(),
      );

      final resp = await places.autocomplete(
        input,
        sessionToken: _sessionToken,
        language: 'en',
        components: [gmws.Component(gmws.Component.country, 'in')],
        location: gmws.Location(
          lat: _biasCenter.latitude,
          lng: _biasCenter.longitude,
        ),
        radius: 60000,
        strictbounds: false,
      );

      if (!mounted) return;

      setState(() {
        if (resp.isOkay) {
          _results = resp.predictions;
          _error = null;
        } else {
          _results = [];
          _error = resp.errorMessage ?? 'No results';
        }
        _loading = false;
      });
    } catch (e) {
      if (!mounted) return;
      setState(() {
        _results = [];
        _error = e.toString();
        _loading = false;
      });
    }
  }

  Future<void> _selectPrediction(gmws.Prediction p) async {
    _sessionToken = const Uuid().v4();

    final places = gmws.GoogleMapsPlaces(
      apiKey: googleApiKey,
      apiHeaders: await const GoogleApiHeaders().getHeaders(),
    );

    final detail = await places.getDetailsByPlaceId(p.placeId!);
    final geometry = detail.result.geometry;
    if (geometry == null) return;

    final target = LatLng(geometry.location.lat, geometry.location.lng);
    final title = detail.result.name;
    final fullAddress =
        detail.result.formattedAddress ?? (p.description ?? title);

    setState(() {
      _biasCenter = target;
      _currentStateName = detail.result.addressComponents
          .firstWhere(
            (c) => c.types.contains('administrative_area_level_1'),
            orElse: () =>
                gmws.AddressComponent(longName: '', shortName: '', types: []),
          )
          .longName;
      _markers
        ..clear()
        ..add(
          Marker(
            markerId: const MarkerId('picked'),
            position: target,
            infoWindow: InfoWindow(title: title, snippet: fullAddress),
          ),
        );

      _pendingAddressTitle = title;
      _pendingFullAddress = fullAddress;
      _pendingLatLng = target;
    });

    await mapController?.animateCamera(
      CameraUpdate.newCameraPosition(
        CameraPosition(target: target, zoom: 16.0),
      ),
    );

    _showConfirmSheet();
  }

  Future<void> _showConfirmSheet() async {
    final String userMobile =
        widget.defaultSenderMobile ?? _phoneCtrl.text; // optional default

    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(
          top: Radius.circular(MediaQuery.of(context).size.width * .05),
        ),
      ),
      builder: (ctx) {
        final width = MediaQuery.of(ctx).size.width;
        final bottomInset = MediaQuery.of(ctx).viewInsets.bottom;

        return StatefulBuilder(
          builder: (ctx, setSheet) {
            bool canConfirm() =>
                _nameCtrl.text.trim().isNotEmpty &&
                _phoneCtrl.text.trim().isNotEmpty;

            return Padding(
              padding: EdgeInsets.only(bottom: bottomInset),
              child: SafeArea(
                top: false,
                child: SingleChildScrollView(
                  child: Padding(
                    padding: EdgeInsets.symmetric(
                      horizontal: width * .05,
                      vertical: width * .04,
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // drag handle
                        Center(
                          child: Container(
                            width: width * .18,
                            height: width * .013,
                            margin: EdgeInsets.only(bottom: width * .03),
                            decoration: BoxDecoration(
                              color: Colors.black12,
                              borderRadius: BorderRadius.circular(width * .01),
                            ),
                          ),
                        ),

                        // Location row
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Icon(Icons.place,
                                color: Colors.green, size: width * .05),
                            SizedBox(width: width * .02),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    _pendingAddressTitle ?? widget.label,
                                    style: TextStyle(
                                      fontSize: width * .04,
                                      fontWeight: FontWeight.w700,
                                    ),
                                  ),
                                  SizedBox(height: width * .01),
                                  Text(
                                    _pendingFullAddress ?? '',
                                    style: TextStyle(
                                      color: Colors.black87,
                                      height: 1.2,
                                      fontSize: width * .032,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            TextButton(
                              onPressed: () => Navigator.pop(ctx),
                              child: Text(
                                "Change",
                                style: TextStyle(fontSize: width * .032),
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: width * .03),

                        // House/Shop (optional)
                        TextField(
                          controller: _houseCtrl,
                          style: TextStyle(fontSize: width * .034),
                          decoration: InputDecoration(
                            hintText: "House / Apartment / Shop (optional)",
                            hintStyle: TextStyle(fontSize: width * .032),
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: EdgeInsets.symmetric(
                              horizontal: width * .035,
                              vertical: width * .03,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                          ),
                        ),
                        SizedBox(height: width * .03),

                        // Sender name (REQUIRED)
                        Text("Sender's Name",
                            style: TextStyle(
                                fontSize: width * .032,
                                fontWeight: FontWeight.w500)),
                        SizedBox(height: width * .015),
                        TextField(
                          controller: _nameCtrl,
                          onChanged: (_) => setSheet(() {}),
                          style: TextStyle(fontSize: width * .034),
                          decoration: InputDecoration(
                            hintText: "Enter sender name",
                            hintStyle: TextStyle(fontSize: width * .032),
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: EdgeInsets.symmetric(
                              horizontal: width * .035,
                              vertical: width * .03,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                            suffixIcon: Icon(Icons.recent_actors_outlined,
                                size: width * .05),
                          ),
                        ),
                        SizedBox(height: width * .03),

                        // Sender phone (REQUIRED)
                        Text("Sender's Mobile number",
                            style: TextStyle(
                                fontSize: width * .032,
                                fontWeight: FontWeight.w500)),
                        SizedBox(height: width * .015),
                        TextField(
                          controller: _phoneCtrl,
                          keyboardType: TextInputType.phone,
                          onChanged: (_) => setSheet(() {}),
                          style: TextStyle(fontSize: width * .034),
                          decoration: InputDecoration(
                            hintText: "Enter mobile number",
                            hintStyle: TextStyle(fontSize: width * .032),
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: EdgeInsets.symmetric(
                              horizontal: width * .035,
                              vertical: width * .03,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                          ),
                        ),
                        SizedBox(height: width * .02),

                        // Use my mobile checkbox
                        Row(
                          children: [
                            SizedBox(
                              width: width * .06,
                              height: width * .06,
                              child: Checkbox(
                                value: _useMyMobile,
                                onChanged: (v) {
                                  setSheet(() {
                                    _useMyMobile = v ?? false;
                                    if (_useMyMobile && userMobile.isNotEmpty) {
                                      _phoneCtrl.text = userMobile;
                                    }
                                  });
                                },
                              ),
                            ),
                            SizedBox(width: width * .02),
                            Expanded(
                              child: Text(
                                "Use my mobile number${userMobile.isNotEmpty ? " : $userMobile" : ""}",
                                style: TextStyle(fontSize: width * .032),
                              ),
                            ),
                          ],
                        ),

                        SizedBox(height: width * .02),
                        Text(
                          "Courier instruction (optional)",
                          style: TextStyle(
                            fontSize: width * .032,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        SizedBox(height: width * .015),
                        TextField(
                          controller: _instructionCtrl,
                          maxLines: 3,
                          style: TextStyle(fontSize: width * .034),
                          decoration: InputDecoration(
                            hintText:
                                "E.g. call on arrival, leave with security, fragile, etc.",
                            hintStyle: TextStyle(fontSize: width * .032),
                            filled: true,
                            fillColor: Colors.white,
                            contentPadding: EdgeInsets.symmetric(
                              horizontal: width * .035,
                              vertical: width * .03,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                            enabledBorder: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(width * .03),
                              borderSide:
                                  const BorderSide(color: Color(0xFFDFE3EA)),
                            ),
                          ),
                        ),
                        SizedBox(height: width * .04),

                        Text("Save as (optional):",
                            style: TextStyle(
                                color: Colors.black54, fontSize: width * .03)),
                        SizedBox(height: width * .04),

                        // Confirm button
                        SizedBox(
                          width: double.infinity,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(
                              backgroundColor: canConfirm()
                                  ? const Color(0xFF2F6BFF)
                                  : const Color(0xFFBFC7DB),
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(
                                vertical: width * .04,
                                horizontal: width * .035,
                              ),
                              shape: RoundedRectangleBorder(
                                borderRadius:
                                    BorderRadius.circular(width * .035),
                              ),
                            ),
                            onPressed: canConfirm()
                                ? () {
                                    _confirmed = true;
                                    if (_pendingFullAddress != null) {
                                      _searchCtrl.text = _pendingFullAddress!;
                                    }
                                    Navigator.pop(ctx);
                                    Navigator.of(context).pop({
                                      'address': _pendingFullAddress ??
                                          _searchCtrl.text,
                                      'latLng': _pendingLatLng,
                                      'label': widget.label,
                                      'house': _houseCtrl.text.trim(),
                                      'senderName': _nameCtrl.text.trim(),
                                      'senderPhone': _phoneCtrl.text.trim(),
                                      'instruction':
                                          _instructionCtrl.text.trim()
                                    });
                                  }
                                : null,
                            child: Text(
                              "Confirm and Proceed",
                              style: TextStyle(
                                fontWeight: FontWeight.w700,
                                fontSize: width * .036,
                              ),
                            ),
                          ),
                        ),
                        if (!canConfirm())
                          Padding(
                            padding: EdgeInsets.only(top: width * .02),
                            child: Text(
                              "Enter sender name and mobile number to continue.",
                              style: TextStyle(
                                color: Colors.red.shade600,
                                fontSize: width * .03,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        SizedBox(height: width * .02),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    final double spacerTop = width * .05;
    final double fieldHeight = width * .105;
    final double panelPad = width * .0125;
    final double cardRadius = width * .03;
    final double borderWidth = width * .005;
    final double iconSize = width * .034;
    final double gap = width * .01;
    final double maxPanelH = width * .6;

    final String hintText = 'Search ${widget.label.toLowerCase()} location';

    return WillPopScope(
      onWillPop: () async {
        if (!_confirmed) {
          _searchCtrl.clear();
        }
        return true;
      },
      child: Scaffold(
        body: GestureDetector(
          onTap: () => FocusScope.of(context).unfocus(),
          behavior: HitTestBehavior.translucent,
          child: Stack(
            children: [
              GoogleMap(
                initialCameraPosition: _initialPosition,
                onMapCreated: (controller) async {
                  mapController = controller;
                  if (_pendingCameraTarget != null) {
                    await mapController!.animateCamera(
                      CameraUpdate.newCameraPosition(
                        CameraPosition(
                            target: _pendingCameraTarget!, zoom: 15.0),
                      ),
                    );
                    _pendingCameraTarget = null;
                  }
                },
                myLocationEnabled: true,
                myLocationButtonEnabled: true,
                zoomControlsEnabled: false,
                markers: _markers,
                onCameraMove: (pos) => _biasCenter = pos.target,
              ),

              // Search + suggestions
              SafeArea(
                child: SizedBox(
                  width: width,
                  child: Column(
                    children: [
                      SizedBox(height: spacerTop),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // colored leading dot
                          SizedBox(
                            height: width * .105,
                            child: Center(
                              child: Container(
                                width: width * 0.04,
                                height: width * 0.04,
                                decoration: BoxDecoration(
                                  border: Border.all(
                                    width: width * .005,
                                    color: Colors.black.withOpacity(.25),
                                  ),
                                  color: widget.accentColor,
                                  shape: BoxShape.circle,
                                ),
                                child: Center(
                                  child: Container(
                                    width: width * 0.02,
                                    height: width * 0.02,
                                    decoration: BoxDecoration(
                                      color: Colors.black.withOpacity(0.5),
                                      shape: BoxShape.circle,
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ),

                          // Search field + suggestion panel
                          Container(
                            width: width * .82,
                            decoration:
                                const BoxDecoration(color: Colors.transparent),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                // search field
                                Container(
                                  height: fieldHeight,
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius:
                                        BorderRadius.circular(width * .035),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.12),
                                        blurRadius: width * .02,
                                        offset: Offset(0, width * .0075),
                                      ),
                                    ],
                                  ),
                                  child: TextField(
                                    controller: _searchCtrl,
                                    focusNode: _searchFocus,
                                    onChanged: _onChanged,
                                    textInputAction: TextInputAction.search,
                                    decoration: InputDecoration(
                                      hintText: hintText,
                                      hintStyle:
                                          TextStyle(fontSize: width * .032),
                                      prefixIcon: Icon(
                                        Icons.search,
                                        size: iconSize,
                                        color: widget.accentColor,
                                      ),
                                      suffixIcon: _searchCtrl.text.isEmpty
                                          ? null
                                          : IconButton(
                                              icon: Icon(Icons.close,
                                                  size: iconSize),
                                              onPressed: () {
                                                setState(() {
                                                  _searchCtrl.clear();
                                                  _results = [];
                                                  _error = null;
                                                });
                                              },
                                            ),
                                      border: InputBorder.none,
                                      contentPadding:
                                          EdgeInsets.only(top: width * .0125),
                                    ),
                                    style: TextStyle(fontSize: width * .035),
                                  ),
                                ),

                                SizedBox(height: gap),

                                // suggestions panel
                                if (_searchFocus.hasFocus &&
                                    (_loading ||
                                        _results.isNotEmpty ||
                                        (_error != null &&
                                            _searchCtrl.text.isNotEmpty)))
                                  Container(
                                    padding: EdgeInsets.all(panelPad),
                                    constraints:
                                        BoxConstraints(maxHeight: maxPanelH),
                                    decoration: BoxDecoration(
                                      color: const Color(0xFFEDEDED),
                                      borderRadius:
                                          BorderRadius.circular(width * .04),
                                      border: Border.all(
                                        color: Colors.black26,
                                        width: borderWidth,
                                      ),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(.18),
                                          blurRadius: width * .03,
                                          offset: Offset(0, width * .01),
                                        ),
                                      ],
                                    ),
                                    child: Builder(builder: (context) {
                                      if (_loading) {
                                        return SizedBox(
                                          height: width * .08,
                                          child: const Center(
                                            child: CupertinoActivityIndicator(),
                                          ),
                                        );
                                      }

                                      if (_error != null) {
                                        return Padding(
                                          padding: EdgeInsets.all(width * .01),
                                          child: Text(
                                            _error!,
                                            style: TextStyle(
                                              color: Colors.redAccent,
                                              fontSize: width * .032,
                                            ),
                                          ),
                                        );
                                      }

                                      if (_results.isEmpty) {
                                        // small skeletons
                                        return Column(
                                          children: List.generate(4, (i) {
                                            return Container(
                                              margin: EdgeInsets.symmetric(
                                                vertical: gap * .6,
                                              ),
                                              decoration: BoxDecoration(
                                                color: Colors.white,
                                                borderRadius:
                                                    BorderRadius.circular(
                                                        cardRadius),
                                                boxShadow: [
                                                  BoxShadow(
                                                    color: Colors.black
                                                        .withOpacity(.06),
                                                    blurRadius: width * .02,
                                                    offset:
                                                        Offset(0, width * .005),
                                                  ),
                                                ],
                                              ),
                                              padding: EdgeInsets.symmetric(
                                                horizontal: width * .022,
                                                vertical: width * .018,
                                              ),
                                              child:
                                                  SizedBox(height: width * .03),
                                            );
                                          }),
                                        );
                                      }

                                      // results
                                      return ListView.separated(
                                        padding: EdgeInsets.zero,
                                        shrinkWrap: true,
                                        itemCount: _results.length,
                                        separatorBuilder: (_, __) =>
                                            SizedBox(height: gap * .6),
                                        itemBuilder: (context, i) {
                                          final p = _results[i];
                                          final main = p.structuredFormatting
                                                  ?.mainText ??
                                              (p.description ?? '');
                                          final secondary = p
                                                  .structuredFormatting
                                                  ?.secondaryText ??
                                              '';

                                          return InkWell(
                                            onTap: () => _selectPrediction(p),
                                            borderRadius: BorderRadius.circular(
                                                cardRadius),
                                            child: Container(
                                              padding: EdgeInsets.symmetric(
                                                horizontal: width * .022,
                                                vertical: width * .018,
                                              ),
                                              decoration: BoxDecoration(
                                                color: Colors.white,
                                                borderRadius:
                                                    BorderRadius.circular(
                                                        cardRadius),
                                                boxShadow: [
                                                  BoxShadow(
                                                    color: Colors.black
                                                        .withOpacity(.06),
                                                    blurRadius: width * .02,
                                                    offset:
                                                        Offset(0, width * .005),
                                                  ),
                                                ],
                                              ),
                                              child: Row(
                                                crossAxisAlignment:
                                                    CrossAxisAlignment.start,
                                                children: [
                                                  Container(
                                                    width: width * .06,
                                                    height: width * .06,
                                                    decoration: BoxDecoration(
                                                      shape: BoxShape.circle,
                                                      color: widget.accentColor
                                                          .withOpacity(.12),
                                                    ),
                                                    child: Icon(
                                                      Icons.place_outlined,
                                                      size: iconSize,
                                                      color: widget.accentColor,
                                                    ),
                                                  ),
                                                  SizedBox(width: width * .02),
                                                  Expanded(
                                                    child: Column(
                                                      crossAxisAlignment:
                                                          CrossAxisAlignment
                                                              .start,
                                                      children: [
                                                        Text(
                                                          main,
                                                          maxLines: 2,
                                                          overflow: TextOverflow
                                                              .ellipsis,
                                                          style: TextStyle(
                                                            fontSize:
                                                                width * .034,
                                                            fontWeight:
                                                                FontWeight.w600,
                                                          ),
                                                        ),
                                                        if (secondary
                                                            .isNotEmpty) ...[
                                                          SizedBox(
                                                              height:
                                                                  width * .005),
                                                          Text(
                                                            secondary,
                                                            maxLines: 2,
                                                            overflow:
                                                                TextOverflow
                                                                    .ellipsis,
                                                            style: TextStyle(
                                                              fontSize:
                                                                  width * .028,
                                                              color: Colors
                                                                  .black
                                                                  .withOpacity(
                                                                      .6),
                                                            ),
                                                          ),
                                                        ],
                                                      ],
                                                    ),
                                                  ),
                                                  SizedBox(width: width * .01),
                                                  Icon(Icons.north_east,
                                                      size: iconSize,
                                                      color: Colors.black45),
                                                ],
                                              ),
                                            ),
                                          );
                                        },
                                      );
                                    }),
                                  ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

}